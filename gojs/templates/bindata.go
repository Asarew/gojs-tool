// Code generated by go-bindata.
// sources:
// goja.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gojaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcb\x6e\xdb\x30\x10\x3c\x4b\x5f\xb1\x20\xe2\x42\x0c\x62\x19\x2d\xd0\x8b\x01\xdf\xfa\x38\xd5\x09\xd2\x22\x77\x5a\x5a\x2b\x74\x2c\x92\x20\x57\x71\x03\x82\xff\x5e\x90\xaa\x62\x3a\x70\x51\x18\xed\x8d\xcb\x99\x1d\xcd\x3e\x28\x23\x9a\x27\xd1\x21\x78\x5f\xdf\x8d\xc7\xb5\xe8\x31\x84\xb2\x94\xbd\xd1\x96\xa0\x2a\x0b\x76\x04\xef\x04\x3d\x86\xc0\x4a\x7e\x82\x77\x92\x1e\x87\x4d\xdd\xe8\x7e\xd1\x6a\xf3\xe1\xe3\xfb\x45\xa7\x77\x82\x9d\x22\x9d\xee\x84\x89\x80\x9b\x93\xd6\xfb\x74\x4a\x42\xcf\xc2\x46\x95\x5e\xb7\xc3\x1e\x61\x05\x11\xa8\xd7\x78\xf8\xaa\x77\xe2\x5b\xba\xac\xd8\x5b\x7b\x8c\xc7\xcc\xed\xa0\x1a\x90\x4a\x52\xc5\xc1\x4f\x0a\xf5\x77\xa4\xaa\x2c\x8a\x24\x73\xbb\xd9\x61\x43\xce\x97\x45\x51\x78\x3f\x87\x2b\xf3\xd4\x45\x85\xe5\x2a\xd7\x83\x79\x08\x39\xe3\xcb\xa0\x1a\x77\xa4\xa4\x70\x64\x2c\x16\x10\x23\x92\x5a\xb9\x29\xc3\x0a\xd5\x21\x5c\xe9\xcd\x2e\x6a\xdd\xa4\xd3\x27\xdc\x4a\x85\xb0\x5c\xc1\x19\x11\xe6\xfd\xc4\x0e\x81\x2d\xc1\xfb\xc9\x56\x08\xf5\x88\x8d\xf9\x21\xdc\x4c\x1f\x41\xd5\xc6\xa1\x8c\x16\x1e\x84\x05\xa1\x5a\x68\xb4\x72\x74\xa1\x8f\x07\x61\xff\x97\x8d\x1f\x2f\x06\x1d\x54\xcf\x62\x3f\x20\xd0\x8b\x41\x7e\x99\x95\x94\xff\x27\x2f\xc6\x4a\x45\x5b\x60\x71\xc6\x15\x87\x99\xab\x67\x0e\x3c\x58\xa4\xc1\xaa\x31\xf4\x01\x02\x7b\x1d\x69\xfe\x91\x33\x77\x7f\x29\xc2\x68\xa9\x08\x6d\x5e\xc6\xc5\x45\xa4\xf5\x51\x78\xb8\x1d\x33\x22\x6b\xaa\x62\xe6\x66\x8e\x01\x5b\xe3\x81\xbd\x2a\xe6\x5b\x27\xb7\xa0\x34\x41\x85\x3f\xa5\xa3\xe3\x0e\xe6\x72\x7c\xe2\xc7\x5e\x1d\xaf\xcf\xb7\xeb\xfa\x4d\xbf\xde\xfd\x43\xc3\x50\xb5\xb9\xd5\x2c\x4c\x0c\x5e\xdf\x63\x27\x1d\xa1\xad\x78\x19\x7e\x3f\xca\xcf\x4a\x6c\xf6\x58\xd9\x41\x91\xec\x11\xae\xe3\xff\xa0\xbe\x1f\xa3\xfc\xad\x9e\xf2\x78\x19\x7e\x05\x00\x00\xff\xff\xe6\x9a\xf4\xe8\x90\x04\x00\x00")

func gojaTmplBytes() ([]byte, error) {
	return bindataRead(
		_gojaTmpl,
		"goja.tmpl",
	)
}

func gojaTmpl() (*asset, error) {
	bytes, err := gojaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "goja.tmpl", size: 1168, mode: os.FileMode(420), modTime: time.Unix(1509074698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"goja.tmpl": gojaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"goja.tmpl": &bintree{gojaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

