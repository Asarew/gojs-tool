// Code generated by go-bindata.
// sources:
// goja.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gojaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x3f\x4f\xc3\x30\x10\xc5\xe7\xf8\x53\x9c\xac\x0e\x09\x6a\x5d\x81\xc4\x52\xa9\x1b\x7f\x26\x4a\x55\x24\x76\x27\xbd\xba\x4e\x1b\x3b\x4a\x1c\x40\x58\xf7\xdd\x91\x6d\x22\x1a\x36\xc4\x76\xbe\x77\xef\xf7\x4e\xe7\x56\x56\x27\xa9\x10\xbc\x17\xdb\x54\x6e\x64\x83\x44\x8c\xe9\xa6\xb5\x9d\x83\x9c\x65\xfc\x47\xdc\x4a\x77\x24\xe2\xac\x98\xe8\x4a\xbb\xe3\x50\x8a\xca\x36\xcb\xbd\x6d\x6f\x6e\xaf\x97\xca\xd6\x92\x4f\x95\x8f\xa1\xd6\xe6\xf3\x88\x46\x05\xb5\x5f\x38\x6b\xcf\xb1\x8a\xb4\x37\xd9\x05\x54\x63\xf7\xc3\x19\x61\x0d\x41\x10\x1b\x7c\x7f\xb4\xb5\x7c\x8a\xcd\x9c\xff\xde\x91\x17\xc1\x79\x18\x4c\x05\xda\x68\x97\x17\xe0\x47\x82\x78\x41\x97\xb3\x2c\x8b\x98\xe7\xb2\xc6\xca\xf5\x9e\x65\x59\xe6\xfd\x02\x66\xed\x49\x05\xc2\x6a\x7d\xc9\x83\x05\x51\x9a\xe8\xa4\x51\x08\x33\x5b\xd6\xa1\x3f\x8f\xd5\x1d\x1e\xb4\x41\x58\xad\x61\xf4\x3c\x0c\xa6\xea\x93\x85\x7b\x3f\x4e\x13\xf1\x15\x78\x3f\x46\x10\x89\xa4\x25\x3f\xd1\x7c\x5c\x02\xcd\xfe\xaf\x89\xaf\xb2\xfb\x5f\x60\x32\xc7\x56\x21\x76\xa8\x74\xef\xb0\xcb\x0b\x46\xdf\x57\xbc\x37\xb2\x3c\x63\xde\x0d\xc6\xe9\x06\xe1\x2a\xfc\xa2\xd8\xa5\xd7\xe5\x71\xa7\x73\x05\xa3\xaf\x00\x00\x00\xff\xff\xa3\x6c\x82\xc8\x46\x02\x00\x00")

func gojaTmplBytes() ([]byte, error) {
	return bindataRead(
		_gojaTmpl,
		"goja.tmpl",
	)
}

func gojaTmpl() (*asset, error) {
	bytes, err := gojaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "goja.tmpl", size: 582, mode: os.FileMode(420), modTime: time.Unix(1509023120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"goja.tmpl": gojaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"goja.tmpl": &bintree{gojaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
