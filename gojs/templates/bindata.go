// Code generated by go-bindata.
// sources:
// goja.tmpl
// goja_namespace.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gojaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6b\x1b\x31\x10\x3d\xaf\x7e\xc5\x20\xe2\x22\x85\x78\x4d\x0b\xbd\x18\x7c\xeb\xc7\xa9\x4e\x48\x4b\xae\x45\x5e\x8f\x37\x72\x76\xa5\x45\xd2\xc6\x0d\x62\xfe\x7b\x91\x36\x5b\x6f\x82\x4b\x31\xcd\x4d\xa3\x79\xef\xe9\xcd\x68\xa6\x53\xd5\x83\xaa\x11\x62\x2c\x6f\x86\xe3\x5a\xb5\x48\xc4\x58\x8c\x17\xdd\x43\x9d\xa2\xe5\x4a\x74\x4e\x9b\xb0\x03\x6e\x9d\xae\xb5\x51\xcd\xcf\x99\xe7\x30\x65\x48\x98\x13\x31\xdd\x76\xd6\x05\x10\xac\x38\xb2\x89\x80\x1f\xd5\x6f\x54\xb8\x27\xe2\x4c\xb2\x09\x98\xd7\x3a\xdc\xf7\x9b\xb2\xb2\xed\x62\x6b\xbb\x0f\x1f\xdf\x2f\x6a\xbb\x57\xfc\x65\xa6\xb6\xb5\xea\x52\xc2\xcf\x83\xb5\x4d\x3e\x65\xa1\x47\xe5\x92\x4a\x6b\xb7\x7d\x83\xb0\x82\x94\x28\xd7\x78\xf8\x6a\xf7\xea\x5b\xbe\x14\xfc\x75\x7d\x5c\x26\xe6\xae\x37\x15\x68\xa3\x83\x90\x10\x47\x85\xf2\x3b\x06\xc1\x8a\x22\xcb\x5c\x6f\xf6\x58\x05\x1f\x59\x51\x14\x31\xce\x21\x55\xf5\xa5\x37\x95\x5f\xae\x46\xc1\x1c\x12\x25\xc4\x62\x01\x29\x0a\xda\x1a\x3f\x32\x9c\x32\x35\xc2\x85\xdd\xec\xd3\xcb\x57\xf9\xf4\x09\x77\xda\x20\x2c\x57\x70\x42\x84\xc7\x38\xa2\x89\xf8\x12\xa6\xad\x2c\x87\xdc\xc0\x27\xba\x1a\x1f\x41\xb3\x4d\x7f\x36\x58\xb8\x53\x0e\x94\xd9\x42\x65\x8d\x0f\x67\xfa\xb8\x53\xee\xad\x6c\xfc\x78\xea\xd0\x83\x78\x54\x4d\x8f\x10\x9e\x3a\x94\xe7\x59\xc9\xfc\xbf\x79\x19\x07\x32\xfd\xa0\x90\x30\xf3\xe5\xcc\x43\x04\x87\xa1\x77\x66\x08\x23\x01\x71\x18\x4d\x4f\x1f\x39\x71\xf7\x8f\x22\x3a\xab\x4d\x40\x37\x2d\xe3\xec\x22\xf2\xf8\x18\x3c\x5c\x0f\x8c\x84\x1a\xab\x98\xf9\xb4\x4f\x7c\x8d\x07\xfe\x47\x31\x2f\xd4\x33\x4d\xef\xc0\xd8\x00\x02\x7f\x69\x1f\x8e\x33\x38\x95\x93\x23\x3e\xf5\xea\x78\x7d\xba\x5d\x97\xaf\xfa\xf5\xee\x3f\x1a\x86\x66\x3b\xb5\x3a\x09\x33\x42\x96\xb7\x58\x6b\x1f\xd0\x09\xc9\xe8\x79\xe5\x3e\x1b\xb5\x69\x50\xb8\xde\x04\xdd\x22\x5c\xa6\x6d\x2f\x6f\x87\x68\xba\x89\x2f\x71\x92\xd1\xef\x00\x00\x00\xff\xff\xa0\xd7\xad\xc5\xaf\x04\x00\x00")

func gojaTmplBytes() ([]byte, error) {
	return bindataRead(
		_gojaTmpl,
		"goja.tmpl",
	)
}

func gojaTmpl() (*asset, error) {
	bytes, err := gojaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "goja.tmpl", size: 1199, mode: os.FileMode(420), modTime: time.Unix(1509100893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goja_namespaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6a\xe3\x30\x14\x85\xd7\xd2\x53\x5c\xc4\x30\xd8\x83\x47\x61\x06\x66\x13\x98\x45\x17\xa5\xab\xa6\x21\x79\x80\x22\xdb\xb7\x8a\x92\xd8\x72\x65\xb9\xb4\x08\xbd\x7b\x11\x72\x7e\x9c\x1f\x93\xec\x92\x6b\xe9\x9c\xf3\xe9\xdc\x46\x14\x1b\x21\x11\x9c\xe3\xf3\xf8\x73\x26\x2a\xf4\x9e\x52\x55\x35\xda\x58\x48\x28\x61\x52\xd9\x55\x97\xf3\x42\x57\x93\x52\x37\x7f\xff\xfd\x99\x48\xbd\x16\xec\xea\x97\xd7\x5a\x97\xb8\x6e\x27\x06\xdf\x3b\x65\x90\xd1\xf4\x58\xce\xb9\xdf\x60\x44\x2d\x11\x7e\xb4\x5d\xfe\xac\xcb\x6e\x8b\x30\xfd\x0f\xfc\xc1\xc8\x96\x2f\x77\xa3\xd6\x7b\x4a\x98\x73\x87\x43\xbb\x84\x73\x61\x57\xde\xb3\xa8\x84\x75\xe9\x7d\x30\xb0\x5f\xcd\x39\x06\xb4\xd6\x74\x85\x05\x77\x9f\xed\x25\xd7\x5e\xf0\x57\x00\xe4\x2f\xf9\x1a\x0b\xbb\x4f\x00\xde\x53\x4f\xe9\x5b\x57\x17\xa0\x6a\x65\x93\x34\x38\xf6\xf8\x7c\x81\x52\xb5\x16\xcd\x4c\x58\xf5\x81\x51\x35\x61\xa7\x51\x59\x06\x8b\x78\x21\xdd\x6b\xf5\x83\xc4\x74\xb5\x55\x15\xf6\xe6\x8b\xf8\x2f\x83\x2a\x42\x1c\x47\x0a\xc6\x94\x34\x1b\x19\xd0\x7e\x9e\x7a\x38\x4a\x6e\x7e\x87\xc0\x44\xc6\x5e\x62\x0a\x07\xc0\x41\xcc\x0c\x2e\xd6\xd6\x63\xa6\x3c\x19\x04\xce\xfa\x4c\xb1\x48\xe2\x29\x25\x3a\xe4\x89\x70\xfc\x09\x6d\xc2\xf0\x33\x2c\x4f\x7b\x76\x97\x86\x06\x6e\x86\xd1\x7c\x19\xc4\x46\xb2\x65\xd0\x6c\x24\xbf\x7e\x20\xbd\xd8\xf8\x63\x2d\xf2\xed\x95\x92\xd2\x7b\x56\x0f\xc6\x77\x8f\x0f\x8d\x86\x61\x28\xe9\xc7\x3b\xc8\x33\xb4\xb1\xb6\x4e\x3b\x0a\x2b\xf8\x1d\x00\x00\xff\xff\x27\x41\xa9\x49\x1b\x04\x00\x00")

func goja_namespaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_goja_namespaceTmpl,
		"goja_namespace.tmpl",
	)
}

func goja_namespaceTmpl() (*asset, error) {
	bytes, err := goja_namespaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "goja_namespace.tmpl", size: 1051, mode: os.FileMode(420), modTime: time.Unix(1509097895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"goja.tmpl": gojaTmpl,
	"goja_namespace.tmpl": goja_namespaceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"goja.tmpl": &bintree{gojaTmpl, map[string]*bintree{}},
	"goja_namespace.tmpl": &bintree{goja_namespaceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

