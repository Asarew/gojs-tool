package {{.PackageName}}

{{$pkgName:=(printf "original_%s" .PackageName) -}}
import (
	{{$pkgName}} "{{.PackagePath}}"
)

import (
	"github.com/robertkrimen/otto"
)

{{$structName:= (toTitle .PackageName)}}

type {{$structName}} struct {
	{{- $pkgFuncs:=.PackageFuncs}}
	// Functions
	{{- range $objName, $objDefine := .PackageFuncs}}
	{{$objName}} interface{}
	{{- end}}

	// Var and consts
	{{- range $objName, $objDefine := .PackageVars}}
	{{$objName}} interface{}
	{{- end}}

	// Types (value type)
	{{- range $objName, $objDefine := .PackageTypes}}
	{{$objName}} interface{}
	{{- end}}

	// Types (pointer type)
	{{range $objName, $objDefine := .PackageTypes}}
	{{- $newObjName := printf "%s%s" "New" $objName -}}
	{{- if not (exist $pkgFuncs $newObjName) -}}
	{{$newObjName}} interface{}
	{{end -}}
	{{- end -}}
}


var (
	module = &{{$structName}} {
		{{- $pkgFuncs:=.PackageFuncs}}
		// Functions
		{{- range $objName, $objDefine := .PackageFuncs}}
		{{$objName}}: {{$pkgName}}.{{$objDefine}},
		{{- end}}

		// Var and consts
		{{- range $objName, $objDefine := .PackageVars}}
		{{$objName}}: {{$pkgName}}.{{$objDefine}},
		{{- end}}

		// Types (value type)
		{{- range $objName, $objDefine := .PackageTypes}}
		{{$objName}}: {{printf "func() %s.%s { return %s.%s{} }" $pkgName $objDefine $pkgName $objDefine}},
		{{- end}}

		// Types (pointer type)
		{{range $objName, $objDefine := .PackageTypes}}
		{{- $newObjName := printf "%s%s" "New" $objName -}}
		{{- if not (exist $pkgFuncs $newObjName) -}}
		{{$newObjName}}: {{printf "func() *%s.%s { return &%s.%s{} }" $pkgName $objDefine $pkgName $objDefine}},
		{{end -}}
		{{- end -}}
	}
)

func Enable(o *otto.Otto) {
	o.Set("{{.PackageName}}", module)
}